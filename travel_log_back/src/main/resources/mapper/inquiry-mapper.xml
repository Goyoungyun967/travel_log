<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.iei.inquiry.model.dao.InquiryDao">
  <select id="getTotalCount" resultType="int">
  	select count(*) from inquiry i
  	<trim prefix="where" prefixOverrides="and|or">
  		<if test="type.equals('member')">
  			seller_no is null
  		</if>
  		<if test="type.equals('seller')">
  			member_no is null
  		</if>
  		<if test="state==1">
  			and (select count(*) from inquiry_reply where inquiry_no=i.inquiry_no) <![CDATA[<]]> 1 
  		</if>
  		<if test="state==2">
  			and (select count(*) from inquiry_reply where inquiry_no=i.inquiry_no) <![CDATA[>]]> 1
  		</if>
  	</trim>
  </select>
  <select id="selectInquiryList" resultType="inquiry">
  	select * from (select rownum as rnum, i2.* from (select inquiry_no,inquiry_title,seller_no,member_no,member_id,to_char(reg_date,'yyyy-mm-dd') as reg_date,representative_name,(select count(*) from inquiry_reply where inquiry_no=i.inquiry_no) as inquiry_state from inquiry i left join member using (member_no) left join seller using (seller_no)
  		<trim prefix="where" prefixOverrides="and|or">
	  		<if test="type.equals('member')">
	  			seller_no is null
	  		</if>
	  		<if test="type.equals('seller')">
	  			member_no is null
	  		</if>
	  		<if test="state==1">
	  			and (select count(*) from inquiry_reply where inquiry_no=i.inquiry_no) <![CDATA[<]]> 1 
	  			
	  		</if>
	  		<if test="state==2">
	  			and (select count(*) from inquiry_reply where inquiry_no=i.inquiry_no) <![CDATA[>=]]> 1
	  		</if>
  		</trim>
  		order by 1 desc
  	)i2) where rnum between #{start} and #{end}
  </select>
  <insert id="insertInquiry">
  	insert into inquiry values (inquiry_seq.nextval, #{inquiryTitle},#{inquiryContent},
  	<choose>
  		<when test="sellerNo==0">
  			null
  		</when>
  		<otherwise>
  			#{sellerNo}
  		</otherwise>
  	</choose>
  	,
  	<choose>
  		<when test="memberNo==0">
  			null
  		</when>
  		<otherwise>
  			#{memberNo}
  		</otherwise>
  	</choose>
  	,sysdate
  	)
  	<selectKey order="AFTER" resultType="int" keyProperty="inquiryNo">
  		select max(inquiry_no) from inquiry
  	</selectKey>
  </insert>
  <insert id="insertInquiryFile">
  	insert into inquiry_file values(inquiry_file_seq.nextval,#{inquiryNo},#{filename},#{filepath})
  </insert>
  <delete id="deleteInquiry">
  	delete from inquiry where inquiry_no = #{inquiryNo}
  </delete>
  <insert id="insertInquiryReply">
  	insert into inquiry_reply values(inquiry_reply_seq.nextval,#{inquiryNo},#{inquiryReplyContent},sysdate)
  </insert>
  <select id="selectOneInquiry" resultType="inquiry">
  	select inquiry_no,inquiry_title,inquiry_content,seller_no,member_no,member_id,to_char(reg_date,'yyyy-mm-dd') as reg_date,representative_name from inquiry left join member using (member_no) left join seller using (seller_no) where inquiry_no = #{inquiryNo}
  </select>
  <select id="selectInquiryFileList" resultType="inquiryFile">
  	select * from inquiry_file where inquiry_no=#{inquiryNo}
  </select>
  <select id="selectInquiryReply" resultType="inquiryReply">
  	select inquiry_reply_no,inquiry_reply_content,to_char(reg_date,'yyyy-mm-dd') as reg_date from inquiry_reply where inquiry_no=#{inquiryNo}
  </select>
  
  <!-- 임시 회원 차트 -->
  <select id="getLodgmentResionData" resultType="string">
  	select distinct(substr(lodgment_addr,0,2)) from lodgment_storage
  </select>
  <select id="getLodgmentResionSearchMemberData" resultType="map">
  	select 
	    (case
	        when member_age >= 70 then '70대 이상'
	        when member_age >= 60 then '60대'
			when member_age >= 50 then '50대'
			when member_age >= 40 then '40대'
			when member_age >= 30 then '30대'
			when member_age >= 20 then '20대'
			when member_age >= 10 then '10대'
	    end) as "age",
	    member_gender as "gender",
		count(*) as "memberCount"
	from 
		booking join member using (member_id) join room using (room_no) join lodgment_storage using (lodgment_no)
	where lodgment_addr like #{region}||'%'
	group by 
		(case
		    when member_age >= 70 then '70대 이상'
			when member_age >= 60 then '60대'
			when member_age >= 50 then '50대'
			when member_age >= 40 then '40대'
			when member_age >= 30 then '30대'
			when member_age >= 20 then '20대'
			when member_age >= 10 then '10대'
		end),
		member_gender
  </select>
  <select id="getLodgmentResionMemberData" resultType="map">
  	select 
	    substr(lodgment_addr,0,2) "region",
		count(*) as "memberCount"
	from 
		booking join member using (member_id) join room using (room_no) join lodgment_storage using (lodgment_no)
	group by 
		substr(lodgment_addr,0,2)
  </select>
  
  <!-- 형묵 나의문의글 왔다감 ㅋ -->
  <select id="myInqTotalCout" resultType="int">
		select count(*) from inquiry where member_no=#{memberNo}  	
  </select>
  
  <select id="myInqList" resultType="inquiry">
  	select * from
	    (select rownum as rnum, i.* from 
	        (select
	        	inquiry_no,
	            inquiry_title,
	            nvl(inquiry_reply_no,0),
	            to_char(i2.reg_date,'yyyy-mm-dd') as reg_date
	        from inquiry i2 left join inquiry_reply using(inquiry_no) where member_no=#{memberNo} order by inquiry_no desc)i)
	where rnum between #{start} and #{end}
  </select>
  
  <!-- 임시 판매자 차트 -->
  <select id="getSellerList" resultType="seller">
  	select seller_no,business_name from seller
  </select>
  <select id="getSellerListSales" resultType="seller">
  	select 
  		business_name , trunc(sum(room_price)/1000) as sales
  	from 
  		booking
  	join 
  		room using (room_no) 
  	join
  		seller using (seller_no)
  	where
  	<choose>
  		<when test="type.equals('year')">
  			payment_date between trunc(add_months(to_date(#{date},'yyyy'),-12),'year') and trunc(add_months(to_date(#{date},'yyyy'),12),'year')-1 and
  		</when>
  		<when test="type.equals('month')">
  			payment_date between to_date(#{date},'yyyymm') and last_day(to_date(#{date},'yyyymm')) and
  		</when>
  	</choose> 
  		status=2
  	group by 
  		business_name
  </select>
  <select id="getSellerSales" resultType="map">
  	select 
  		to_char(payment_date,'yyyy-mm') as "date",
  		trunc(sum(room_price)/1000) as "sales",
  		trunc(sum(sum(room_price)) over (order by to_char(payment_date, 'yyyy-mm'))/1000) as "sum"
  	from 
  		booking 
  	join 
  		room using (room_no) 
  	where 
  		payment_date between trunc(add_months(sysdate,-12),'year') and trunc(add_months(sysdate,12),'year')-1 
  		and 
  		status=2
  		and
  		seller_no=#{sellerNo} 
  	group by to_char(payment_date,'yyyy-mm')
  </select>
  <select id="getSellerSalesAge" resultType="map">
  	select 
  		count(*) as "sales",
  		(case
    		when member_age >= 70 then '70대 이상'
			when member_age >= 60 then '60대'
			when member_age >= 50 then '50대'
			when member_age >= 40 then '40대'
			when member_age >= 30 then '30대'
			when member_age >= 20 then '20대'
			when member_age >= 10 then '10대'
		end) as "age"
	from 
		booking 
	join 
		seller using (seller_no) 
	join 
		member using (member_id) 
	where 
		seller_no=#{sellerNo} 
	group by 
		(case
		    when member_age >= 70 then '70대 이상'
			when member_age >= 60 then '60대'
			when member_age >= 50 then '50대'
			when member_age >= 40 then '40대'
			when member_age >= 30 then '30대'
			when member_age >= 20 then '20대'
			when member_age >= 10 then '10대'
		end)
		order by 1 desc
  </select>
  <select id="getSellerSalesGender" resultType="map">
  	select 
  		count(*) as "sales",
  		decode(member_gender,'m','남성','f','여성') as "gender"
	from 
		booking 
	join 
		seller using (seller_no) 
	join 
		member using (member_id) 
	where 
		seller_no=#{sellerNo}
	group by 
		decode(member_gender,'m','남성','f','여성')
  </select>
  
  <!-- 정산 -->
  <select id="selectSellerSales" resultType="seller">
  	select 
  		sum(room_price) as sales ,seller_no
  	from 
  		booking 
  	join 
  		room  using (room_no)
  	where 
  		payment_date between add_months(sysdate,-1) and sysdate and state=2 group by seller_no
  </select>
  <insert id="insertSellerStm">
  	insert into stm_tbl values(stm_seq.nextval,#{sellerNo},#{sales},sysdate,0)
  </insert>
  <select id="getSellerStmCount" resultType="int">
  	select count(*) from stm_tbl where stm_state=#{state}
  </select>
  <select id="getSellerStmList" resultType="stmInfo">
  	select * from (select rownum as rnum,s.* from (select stm_num,to_char(stm_price,'FM999,999,999') as stm_price,to_char(stm_date,'yyyy-mm-dd') as stm_date,business_name,stm_state from stm_tbl join seller using (seller_no) where stm_state = #{state} order by stm_date desc)s) where rnum between #{start} and #{end}
  </select>
  <update id="updateStm">
		update stm_tbl set stm_state=1 where stm_num in <foreach collection="array" item="stmNum" open="(" close=")" separator=",">#{stmNum}</foreach>
	</update>
  
  <!-- 상품 게시글 관리 -->
  <select id="getAdminLodgmentCount" resultType="int">
  	select count(*) from lodgment_storage where lodgment_delete=#{lodgmentDelete}
  </select>
  <select id="getAdminLodgmentList" resultType="lodgmentStorage">
  	select * from (select rownum as rnum, l.* from (select lodgment_no,lodgment_name,lodgment_type_name,lodgment_delete,business_name from lodgment_storage join lodgment_type using (lodgment_type_no) join seller using (seller_no) where lodgment_delete=#{lodgmentDelete})l) where rnum between #{start} and #{end}
  </select>
  <update id="updateLodgmentDelete">
		update lodgment_storage set lodgment_delete=1 where lodgment_no in <foreach collection="array" item="lodgmentNo" open="(" close=")" separator=",">#{lodgmentNo}</foreach>
	</update>
	
  <!-- 게시글 신고  -->
  <select id="getBoardReportListCount" resultType="int">
  	select count(distinct board_no) from board_report    
  </select>
  <select id="getBoardReportList" resultType="boardReportList">
  	select * from (select rownum as rnum, br2.*,(select count(*) from board_report where board_no=br2.board_no) as total_count from (select 
    sum(case when br.report_type = 1 then 1 else 0 end) as abuse_count,
    sum(case when br.report_type = 2 then 1 else 0 end) as uncomfortable_count,
    sum(case when br.report_type = 3 then 1 else 0 end) as ad_count,
    sum(case when br.report_type = 4 then 1 else 0 end) as etc_count,
    m.member_nickname, 
    b.board_no,
    b.board_title,
    b.board_type
	from 
		board_report br
	join 
		board b on br.board_no = b.board_no
	join 
		member m on b.member_no = m.member_no
	group by 
		m.member_nickname, b.board_no, b.board_title,b.board_type 
	order by 
		b.board_no desc)br2) where rnum between #{start} and #{end}
  </select>
  <select id="getBoardReport" resultType="boardReport">
  	select report_no,report_type,report_content,member_nickname from board_report join member using (member_no) where board_no=#{board_no}
  </select>
  <delete id="deleteBoardReport">
  	delete from board_report where report_no=#{report_no}
  </delete>
  
  <!-- 댓글 신고 -->
  <select id="getCommentReportListCount" resultType="int">
  	select count(distinct comment_no) from comment_report    
  </select>
  <select id="getCommentReportList" resultType="commentReportList">
  	select * from (select rownum as rnum, cr2.*,(select count(*) from comment_report where comment_no=cr2.comment_no) as total_count from (select 
    sum(case when cr.comment_report_type = 1 then 1 else 0 end) as abuse_count,
    sum(case when cr.comment_report_type = 2 then 1 else 0 end) as uncomfortable_count,
    sum(case when cr.comment_report_type = 3 then 1 else 0 end) as ad_count,
    sum(case when cr.comment_report_type = 4 then 1 else 0 end) as etc_count,
    bc.comment_writer as member_nickname,
    bc.comment_no,
    bc.board_no,
    bc.comment_content,
    b.board_type
	from 
		comment_report cr
	join 
		board_comment bc on bc.comment_no = cr.comment_no
	join
		board b on bc.board_no = b.board_no 
	group by 
		bc.comment_writer,  bc.comment_no,bc.comment_content,bc.board_no,b.board_type
	order by 
		bc.comment_no desc)cr2) where rnum between #{start} and #{end}
  </select>
  <select id="getCommentReport" resultType="commentReport">
  	select comment_report_no,comment_report_type,comment_report_content,member_nickname from comment_report join member using (member_no) where comment_no=#{commentNo}
  </select>
  <delete id="deleteCommentReport">
  	delete from comment_report where comment_report_no=#{reportNo}
  </delete>
  
  <!-- 리뷰 신고 -->
  <select id="getReviewReportListCount" >
  	select count(distinct review_no) from lodgment_review_report
  </select>
  <select id="getReviewReportList" resultType="lodgmentReviewReport">
  	select * from (select rownum as rnum, lrr.*,(select count(*) from lodgment_review_report where review_no=lrr.review_no) as total_count from (select
    sum(case when review_report_type = 1 then 1 else 0 end) as abuse_count,
    sum(case when review_report_type = 2 then 1 else 0 end) as uncomfortable_count,
    sum(case when review_report_type = 3 then 1 else 0 end) as ad_count,
    sum(case when review_report_type = 4 then 1 else 0 end) as etc_count,
    review_content,
    rating,
    member_nickname,
    lodgment_no,
    review_no 
    from 
    	lodgment_review_report 
    join 
    	lodgment_review lr using (review_no)
    join 
    	lodgment_storage using (lodgment_no) 
    join
    	member m on m.member_no=lr.member_no 
    group by 
    	review_content,rating,member_nickname,lodgment_no,review_no 
    order by review_no desc)lrr) where rnum between #{start} and #{end}
  </select>
  <select id="selectReviewFile" resultType="lodgmentReviewFile">
  	select * from lodgment_review_file where review_no=#{reviewNo}
  </select>
  <delete id="deleteReviewReport">
  	delete from lodgment_review_report where review_no=#{reviewNo}
  </delete>
  
  
</mapper>
