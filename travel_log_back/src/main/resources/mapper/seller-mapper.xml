<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.iei.seller.model.dao.SellerDao">

	<!-- 형묵 - sellerId 중복체크  -->
	<select id="checkSellerId" resultType="int">
 		select count(*) from seller where business_no=#{businessNo}
 	</select>
 	
 	<!-- 형묵 seller 회원가입 -->
	<insert id="insertSeller">
		insert into seller values(seller_seq.nextval,#{businessNo},#{representativeName},#{sellerPhone},#{bankName},#{accountNumber},sysdate,0,#{sellerPw},#{businessName})
    </insert>
    
    <!-- 형묵 seller 로그인같음-->
    <select id="selectLoginSeller" resultType="seller">
    	select seller_no,seller_pw,business_name,seller_app from seller where business_no=#{businessNo}
    </select>

    <!-- 형묵 seller refresh하는부분 -->
    <select id="selectOneSeller" resultType="seller">
		select * from seller where seller_no=#{sellerNo}
	</select>

	<select id="getTotalCount" resultType="int">
		select count(*) from seller where seller_app=#{sellerApp}
	</select>
	
	<select id="selectSellerList" resultType="seller">
		select * from (select rownum as rnum, s.* from (select seller_no,business_no,representative_name,business_name,to_char(enroll_date,'yyyy-mm-dd') as enroll_date,seller_app from seller where seller_app=#{sellerApp})s) where rnum between #{start} and #{end}
	</select>
	
	<update id="updateSellerApp">
		update seller set seller_app=1 where seller_no in <foreach collection="array" item="sellerNo" open="(" close=")" separator=",">#{sellerNo}</foreach>
	</update>

	<!-- 판매자 차트 -->
  <select id="getSellerList" resultType="seller">
  	select seller_no,business_name from seller
  </select>
  <select id="getSellerListSales" resultType="seller">
  	select 
  		business_name , trunc(sum(room_price)/1000) as sales
  	from 
  		booking
  	join 
  		room using (room_no) 
  	join
  		seller using (seller_no)
  	where
  	<choose>
  		<when test="type.equals('year')">
  			payment_date between trunc(add_months(to_date(#{date},'yyyy'),-12),'year') and trunc(add_months(to_date(#{date},'yyyy'),12),'year')-1 and
  		</when>
  		<when test="type.equals('month')">
  			payment_date between to_date(#{date},'yyyymm') and last_day(to_date(#{date},'yyyymm')) and
  		</when>
  	</choose> 
  		status=2
  	group by 
  		business_name
  </select>
  <select id="getSellerSales" resultType="map">
  	select 
  		to_char(payment_date,'yyyy-mm') as "date",
  		trunc(sum(room_price)/1000) as "sales",
  		trunc(sum(sum(room_price)) over (order by to_char(payment_date, 'yyyy-mm'))/1000) as "sum"
  	from 
  		booking 
  	join 
  		room using (room_no) 
  	where 
  		payment_date between trunc(add_months(sysdate,-12),'year') and trunc(add_months(sysdate,12),'year')-1 
  		and 
  		status=2
  		and
  		seller_no=#{sellerNo} 
  	group by to_char(payment_date,'yyyy-mm')
  </select>
  <select id="getSellerSalesAge" resultType="map">
  	select 
  		count(*) as "sales",
  		(case
    		when member_age >= 70 then '70대 이상'
			when member_age >= 60 then '60대'
			when member_age >= 50 then '50대'
			when member_age >= 40 then '40대'
			when member_age >= 30 then '30대'
			when member_age >= 20 then '20대'
			when member_age >= 10 then '10대'
		end) as "age"
	from 
		booking 
	join 
		seller using (seller_no) 
	join 
		member using (member_id) 
	where 
		seller_no=#{sellerNo} 
	group by 
		(case
		    when member_age >= 70 then '70대 이상'
			when member_age >= 60 then '60대'
			when member_age >= 50 then '50대'
			when member_age >= 40 then '40대'
			when member_age >= 30 then '30대'
			when member_age >= 20 then '20대'
			when member_age >= 10 then '10대'
		end)
		order by 1 desc
  </select>
  <select id="getSellerSalesGender" resultType="map">
  	select 
  		count(*) as "sales",
  		decode(member_gender,'m','남성','f','여성') as "gender"
	from 
		booking 
	join 
		seller using (seller_no) 
	join 
		member using (member_id) 
	where 
		seller_no=#{sellerNo}
	group by 
		decode(member_gender,'m','남성','f','여성')
  </select>
  
  <!-- 정산 -->
  <select id="selectSellerSales" resultType="seller">
  	select 
  		sum(room_price) as sales ,seller_no
  	from 
  		booking 
  	join 
  		room  using (room_no)
  	where 
  		payment_date between add_months(sysdate,-1) and sysdate and state=2 group by seller_no
  </select>
  <insert id="insertSellerStm">
  	insert into stm_tbl values(stm_seq.nextval,#{sellerNo},#{sales},sysdate,0)
  </insert>
  <select id="getSellerStmCount" resultType="int">
  	select count(*) from stm_tbl where stm_state=#{state}
  </select>
  <select id="getSellerStmList" resultType="stmInfo">
  	select * from (select rownum as rnum,s.* from (select stm_num,to_char(stm_price,'FM999,999,999') as stm_price,to_char(stm_date,'yyyy-mm-dd') as stm_date,business_name,stm_state from stm_tbl join seller using (seller_no) where stm_state = #{state} order by stm_date desc)s) where rnum between #{start} and #{end}
  </select>
  <update id="updateStm">
		update stm_tbl set stm_state=1 where stm_num in <foreach collection="array" item="stmNum" open="(" close=")" separator=",">#{stmNum}</foreach>
	</update>

</mapper>